{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/html-codes.pipe.ts","webpack:///src/app/trivia-card/trivia-card.component.html","webpack:///src/app/trivia-card/trivia-card.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","AppComponent","AppModule","BrowserModule","HttpClientModule","TriviaCardComponent","HtmlCodesPipe","value","split","join","http","opentdb_difficulty","opentdb_categories","opentdb_selected_categories","opentdb_session_token","show_difficulty_menu","show_category_menu","question","showAnswer","selectedAnswer","token","document","cookie","find","row","startsWith","updateQuestion","getCategories","subscribe","data","trivia_categories","console","log","i","difficulty","index","indexOf","splice","getConfig","response_code","alert","random_index","Math","floor","random","all_answers","results","incorrect_answers","correct_answer","correct_answer_index","event","srcElement","checked","getToken","length","url","get","changeDifficulty","updateToken","environment","production","enableProdMode","platformBrowser","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent { }\r\n","<h1>Open Trivia Database Questions</h1>\r\n<trivia-card></trivia-card>\r\n<ul>\r\n    <li>Click any answer to check your guess.</li>\r\n    <li>Click \"New Question\" to get a new question.</li>\r\n    <li>Click on the category label so select the categories (selecting none will be handle as if all were selected).</li>\r\n    <li>Click on the difficulty label so select the difficulty.</li>\r\n    <li>Check 'Force unique questions' to let the API remember all the questions you already answered. The set of previous questions is identified via a token. Your browser will remember this token even if you restart it. To reset the pool of questions uncheck this setting or wait 6h after your last request (by that time the data is not available on the server anymore).</li>\r\n</ul>\r\n<a href=\"https://github.com/muePatrick/joey-triviani\">Visit the GitHub Repo for more information.</a>\r\n<p>\r\n    Questions provided by <a href=\"https://opentdb.com\">Open Trivia Database</a> under the \"Creative Commons Attribution-ShareAlike 4.0 International License\".\r\n</p>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { TriviaCardComponent } from './trivia-card/trivia-card.component';\r\n\r\nimport { HtmlCodesPipe } from './html-codes.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    TriviaCardComponent,\r\n    HtmlCodesPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    \r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'htmlCodes' })\r\nexport class HtmlCodesPipe implements PipeTransform {\r\n    transform(value: string): string {\r\n        value = value.split(\"&#039;\").join(\"'\")\r\n        value = value.split(\"&quot;\").join('\"')\r\n        return value\r\n    }\r\n}","<div class=\"box\">\r\n    <article class=\"media\">\r\n        <div class=\"media-content\">\r\n            <div class=\"content\">\r\n                <div class=\"dropdown is-unselectable\" [class.is-active]=\"show_category_menu==true\">\r\n                    <div class=\"dropdown-trigger\" style=\"cursor: pointer;\"\r\n                        (click)=\"show_category_menu=!show_category_menu;show_difficulty_menu=false\">\r\n                        <strong>Category: {{question.category}}</strong>\r\n                    </div>\r\n                    <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\r\n                        <div class=\"dropdown-content has-background-info-light\">\r\n                            <a class=\"dropdown-item\" *ngFor=\"let category of opentdb_categories; let id = index\"\r\n                                (click)=toggleCategory(category.id)>\r\n                                <label class=\"checkbox\">\r\n                                    <input type=\"checkbox\"\r\n                                        [checked]=\"opentdb_selected_categories.indexOf(category.id)>=0\">\r\n                                    {{category.name}}\r\n                                </label>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br><br>\r\n                <div class=\"dropdown is-unselectable\" [class.is-active]=\"show_difficulty_menu==true\">\r\n                    <div class=\"dropdown-trigger\" style=\"cursor: pointer;\"\r\n                        (click)=\"show_difficulty_menu=!show_difficulty_menu;show_category_menu=false\">\r\n                        <small>Difficulty: {{question.difficulty}}</small>\r\n                    </div>\r\n                    <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\r\n                        <div class=\"dropdown-content has-background-info-light\">\r\n                            <a class=\"dropdown-item\" [class.is-active]=\"opentdb_difficulty==null\"\r\n                                (click)=\"changeDifficulty(null)\">\r\n                                [any]\r\n                            </a>\r\n                            <a class=\"dropdown-item\" [class.is-active]=\"opentdb_difficulty=='easy'\"\r\n                                (click)=\"changeDifficulty('easy')\">\r\n                                easy\r\n                            </a>\r\n                            <a class=\"dropdown-item\" [class.is-active]=\"opentdb_difficulty=='medium'\"\r\n                                (click)=\"changeDifficulty('medium')\">\r\n                                medium\r\n                            </a>\r\n                            <a class=\"dropdown-item\" [class.is-active]=\"opentdb_difficulty=='hard'\"\r\n                                (click)=\"changeDifficulty('hard')\">\r\n                                hard\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br><br>\r\n                <span class=\"title is-3 is-unselectable\">\r\n                    {{question.question | htmlCodes}}\r\n                </span>\r\n                <br><br>\r\n                <div class=\"answer_list\">\r\n                    <button class=\"button\" *ngFor=\"let answer of question.all_answers; let i = index\"\r\n                        (click)=\"checkResult(i)\" [class.is-success]=\"showAnswer && question.correct_answer_index == i\"\r\n                        [class.is-danger]=\"showAnswer && question.correct_answer_index != i && selectedAnswer == i\"\r\n                        [disabled]=showAnswer>\r\n                        {{answer | htmlCodes}}</button>\r\n                </div>\r\n                <br><br>\r\n                <div class=\"settings\">\r\n                    <button class=\"button is-small is-info is-rounded is-outlined\" (click)=\"updateQuestion()\">New\r\n                        Question</button>\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" (click)=\"updateToken($event)\" [checked]=\"opentdb_session_token!==''\">\r\n                        Force unique questions.\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </article>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'trivia-card',\r\n  templateUrl: './trivia-card.component.html',\r\n  styleUrls: ['./trivia-card.component.css', '../../../node_modules/bulma/css/bulma.css'] //''\r\n})\r\nexport class TriviaCardComponent implements OnInit {\r\n\r\n  opentdb_difficulty = \"easy\" // null, easy, medium, hard\r\n  opentdb_categories: any = []\r\n  opentdb_selected_categories: any = []\r\n  opentdb_session_token: string = \"\"\r\n\r\n  show_difficulty_menu = false\r\n  show_category_menu = false\r\n\r\n  question = {\r\n    \"category\": \"\",\r\n    \"type\": \"multiple\",\r\n    \"difficulty\": \"\",\r\n    \"question\": \"-/-\",\r\n    \"correct_answer\": \"-/-\",\r\n    \"incorrect_answers\": [\"-/-\", \"-/-\", \"-/-\"],\r\n    \"all_answers\": [\"-/-\", \"-/-\", \"-/-\", \"-/-\"],\r\n    \"correct_answer_index\": -1\r\n  }\r\n\r\n  showAnswer = false\r\n  selectedAnswer = -1\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let token:any = \"\"\r\n    token = document.cookie?.split('; ')?.find(row => row.startsWith('token='))?.split('=')[1] || \"\"\r\n    this.opentdb_session_token = token\r\n\r\n    this.updateQuestion()\r\n    this.getCategories().subscribe((data: any) => {\r\n      this.opentdb_categories = [...data.trivia_categories]\r\n      console.log(this.opentdb_categories)\r\n    })\r\n  }\r\n\r\n  checkResult(i: any) {\r\n    this.showAnswer = true\r\n    this.selectedAnswer = i\r\n  }\r\n\r\n  changeDifficulty(difficulty: any) {\r\n    this.opentdb_difficulty = difficulty\r\n    this.show_difficulty_menu = false\r\n  }\r\n\r\n  toggleCategory(id: number) {\r\n    let index = this.opentdb_selected_categories.indexOf(id)\r\n    if (index >= 0) {\r\n      this.opentdb_selected_categories.splice(index, 0)\r\n    } else {\r\n      this.opentdb_selected_categories = [...this.opentdb_selected_categories, id]\r\n    }\r\n  }\r\n\r\n  updateQuestion() {\r\n    this.getConfig().subscribe((data: any) => {\r\n      if(data.response_code) {\r\n        alert(\"Could not load question. If you enabled 'Force unique questions' you may have already exhausted all available questions. Try adding more categories or disable this setting.\")\r\n        return\r\n      }\r\n\r\n      let random_index = Math.floor(Math.random() * 4)\r\n      let all_answers = [...data.results[0].incorrect_answers]\r\n      all_answers.splice(random_index, 0, data.results[0].correct_answer)\r\n      this.question = { ...data.results[0], all_answers: all_answers, correct_answer_index: random_index }\r\n      this.showAnswer = false\r\n      this.selectedAnswer = -1\r\n      this.show_difficulty_menu = false\r\n      this.show_category_menu = false\r\n\r\n      \r\n      let token:any = \"\"\r\n      token = document.cookie?.split('; ')?.find(row => row.startsWith('token='))?.split('=')[1] || \"\"\r\n      this.opentdb_session_token = token\r\n      document.cookie = `token=${token};max-age=21600`;\r\n    })\r\n  }\r\n\r\n  updateToken(event: any) {\r\n    if (event.srcElement.checked) {\r\n      this.getToken().subscribe((data: any) => {\r\n        this.opentdb_session_token = data.token\r\n        document.cookie = `token=${data.token};max-age=21600`;\r\n      })\r\n    } else {\r\n      this.opentdb_session_token = \"\"\r\n    }\r\n  }\r\n\r\n  getConfig() {\r\n    // return this.http.get(\"https://opentdb.com/api.php?amount=1&category=15&difficulty=easy&type=multiple\", {});\r\n    // TODO use session token to not get duplicates (then also check error)\r\n\r\n    let random_index = Math.floor(Math.random() * this.opentdb_selected_categories.length)\r\n\r\n\r\n    let url = \"https://opentdb.com/api.php?amount=1&type=multiple\"\r\n    url = url + (this.opentdb_difficulty ? `&difficulty=${this.opentdb_difficulty}` : '')\r\n    url = url + (this.opentdb_selected_categories.length > 0 ? `&category=${this.opentdb_selected_categories[random_index]}` : '')\r\n    url = url + (this.opentdb_session_token !== \"\" ? `&token=${this.opentdb_session_token}` : '')\r\n    console.log(url)\r\n    return this.http.get(url, {});\r\n  }\r\n\r\n  getCategories() {\r\n    return this.http.get(\"https://opentdb.com/api_category.php\", {});\r\n  }\r\n\r\n  getToken() {\r\n    return this.http.get(\"https://opentdb.com/api_token.php?command=request\", {});\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}